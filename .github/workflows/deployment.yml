# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Deployment

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  deploy:

    runs-on: self-hosted  

    steps:

    - name: Checkout Code
      uses: actions/checkout@v3
    
    - name: Kill Container if exists
      run: |
        if [ "$(docker ps -q -f name=armms-storage)" ]; then
          docker kill armms-pipeline
        fi
    
    - name: Remove Container if exists
      run: |
        if [ "$(docker ps -aq -f name=armms-storage)" ]; then
          docker rm armms-pipeline
        fi
    
    - name: Add env variables
      run: |
        echo "ARMMS_SECRET=${{ secrets.ARMMS_SECRET }}" >> ./.env
        echo "DROPBOX_APP_KEY=${{ secrets.DROPBOX_APP_KEY }}" >> ./.env
        echo "DROPBOX_APP_SECRET=${{ secrets.DROPBOX_APP_SECRET }}" >> ./.env
        echo "DROPBOX_REDIRECT_URI=${{ vars.DROPBOX_REDIRECT_URI }}" >> ./.env
        echo "CALLBACK_REDIRECT_URI=${{ vars.CALLBACK_REDIRECT_URI }}" >> ./.env
        echo "KEYCLOAK_JWKS_URL=${{ vars.KEYCLOAK_JWKS_URL }}" >> ./.env
        echo '${{ secrets.KEYCLOAK_CONFIG }}' > keycloak_config.json

    - name: Build and Deploy Container
      run: |
        docker build -t armms-storage .
        docker run -d --name armms-storage --network=host armms-storage

    

